#!/usr/bin/env python3

# This Python file uses the following encoding: utf-8

import sys

from PySide2.QtCore import qDebug, Qt, QObject, Signal, Slot, QFile, QAbstractTableModel, QPoint, QRectF
from PySide2.QtWidgets import QApplication, QAction, QTableWidgetItem, QMenu
from PySide2.QtUiTools import QUiLoader
from PySide2.QtGui import QIcon, QKeySequence, QCursor, QTextDocument, QTextCursor, QPainter, QPageSize
from PySide2.QtPrintSupport import QPrinter
from PySide2.QtPrintSupport import QPrintPreviewWidget
import PySide2
TESTICON="option.svg"
TESTICONLINKED="linked.svg"

class Helper():
    def __init__(self):
        pass

    def genAction(self, name=None, fn=None, data=None, icon=None, shortcut=None, tip=None, parent=None):
        if name and fn:
            if icon:
                if isinstance(icon,str):
                    icon = QIcon(icon)
                elif isinstance(icon,QIcon):
                    pass
                else:
                    icon = None
            if icon:
                action = QAction(icon,name,parent)
            else:
                action = QAction(name,parent)
            
            if data != None:
                action.setData(data)

            if shortcut:
                if isinstance(shortcut,QKeySequence):
                    pass
                else:
                    try:
                        shortcut = QKeySequence(shortcut)
                    except:
                        shortcut = None
            if shortcut:
                action.setShortcuts(shortcut)
            
            if tip and isinstance(tip,str):
                action.setStatusTip(tip)

            action.triggered.connect(fn)

            return action
        return None

class tableHelper(QObject):
    def __init__(self, controller=None, table=None):
        QObject.__init__(self)
        if controller:
            self.controller = controller
        if table:
            self.setTableView(table)

    def setTableView(self, table):
        self.table = table
        self.model = table.model()
        self.table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.table.customContextMenuRequested.connect(self.customMenu)
        self.table.cellClicked.connect(self.cellClicked)

    @Slot(int, int)
    def cellClicked(self, row, column):
        if column == 0:
            self.makeLinkedAction(row)

    @Slot(QPoint)
    def customMenu(self, position):
        qDebug("{}".format(position))
        item = self.table.itemAt(position)
        qDebug("item on x:{} y:{} with value {}".format(item.column(),item.row(),item.text()))
        qm = QMenu('titulo', self.table)
        if item.column()!=0:
            for seq in range(1,4):
                qm.addAction(Helper().genAction(name="ContextAction{}_{}".format(seq,item.text()),fn=self.printContextAction,data="ContextAction_{}_Data".format(seq,item.text()),icon=TESTICON,shortcut=None,tip="TipContextAction_{}".format(seq,item.text()),parent=qm))
            qm.addAction(Helper().genAction(name="Delete line '{}'".format(item.text()),fn=self.deleteContextAction,data=item.row(),icon=TESTICON,shortcut=None,tip="TipContextAction_Delete_{}".format(item.text()),parent=qm))
        else:
            self.makeLinkedAction(item.row())
        qm.exec_(QCursor.pos())
    
    @Slot()
    def printContextAction(self):
        data = self.sender().data()
        qDebug("senderData:{}".format(data))
        if self.controller:
            self.controller.window.statusbar.showMessage("Action from '{}' triggered".format(data),10*1000)

    @Slot()
    def deleteContextAction(self):
        data = self.sender().data()
        self.table.removeRow(data)
        if self.controller:
            self.controller.window.statusbar.showMessage("Deleted row {}".format(data),10*1000)

    def addItem(self, item):
        last_row = self.table.rowCount()
        self.table.insertRow(last_row)
        if not isinstance(item,list) and self.table.columnCount() >= 2:
            first_element = QTableWidgetItem(QIcon(),"")
            last_element = QTableWidgetItem("{}".format(item))
            itemlist = [first_element]
            for i in range(self.table.columnCount()-2):
                itemlist.append(QTableWidgetItem(""))
            itemlist.append(last_element)
        for i in range(len(itemlist)):
            self.table.setItem(last_row,i,itemlist[i])

    def makeLinkedAction(self, row):
        item = self.table.item(row,0)
        if item.icon():
            item.setIcon(QIcon())
        else:
            item.setIcon(QIcon(TESTICONLINKED))

class helperPDF():

    textMargins = 12
    borderMargins = 10
    doPageFooter = False

    def __init__(self, textMargins = 12, borderMargins = 10, doPageFooter = False):
        self.textMargins = textMargins
        self.borderMargins = borderMargins
        self.doPageFooter = doPageFooter
        self.printer = None
        self.printer = self.initPrinter()

    def initPrinter(self, resolution=QPrinter.HighResolution, pagesize=QPrinter.A4):
        self.printer = QPrinter(resolution)
        self.printer.setPageSize(pagesize)
        return self.printer
    
    def configureOutput(self, filename=None, format=QPrinter.PdfFormat):
        if not self.printer:
            return None
        if filename:
            self.printer.setOutputFormat(format)
            self.printer.setOutputFileName(filename)
            return self.printer
        return None

    def loadDocument(self, document):
        if isinstance(document,str):
            self.doc = self.makeDocument(document)
        if isinstance(self.doc,QTextDocument):
            self.customPrint(self.doc)
            return True
        return None

    def printFile(self, filename):
        if not self.doc.isEmpty():
            self.configureOutput(filename)
            self.doc.print_(self.printer)
            return True
        return None

    def makeDocument(self, content, html=True, css=None):
        doc = QTextDocument()
        doc.setPageSize(QPageSize(QPageSize.A4).size(QPageSize.Millimeter))
        header = self.makeHeader(doc,"information","exam title")
        if html:
            #if css == None:
            #    css = self.makeStyles()
            #if not isinstance(css, str):
            #    css = None
            doc.setDefaultStyleSheet(self.makeStyles())                
            doc.setHtml(header+content)
        else:
            doc.setPlainText(header+content)
        return doc
        
    def mmToPixels(self, mm):
        return mm * 0.039370147 * self.printer.resolution()

    def paintPage(self, currentPage, totalpages, painter, doc, textrect, footerheight):
        painter.save()
        pagesize = QRectF(0,currentPage * doc.pageSize().height(),doc.pageSize().width(), doc.pageSize().height())
        painter.setClipRect(textrect)
        painter.translate(0,-pagesize.top())
        painter.translate(textrect.left(),textrect.top())
        doc.drawContents(painter)
        painter.restore()
        footerrect = QRectF(textrect)
        footerrect.setTop(textrect.bottom())
        footerrect.setHeight(footerheight)
        if self.doPageFooter:
            painter.drawText(footerrect,Qt.AlignVCenter|Qt.AlignRight,"Page {} of {}".format(currentPage+1,totalpages))

    def customPrint(self, doc):
        painter = QPainter(self.printer)
        doc.documentLayout().setPaintDevice(self.printer)
        doc.setPageSize(self.printer.pageRect().size())
        pageSize = self.printer.pageRect().size()
        tm = self.mmToPixels(self.textMargins)
        footHeight = painter.fontMetrics().height()
        textRect = QRectF(tm,tm,pageSize.width() - 2 * tm, pageSize.height()-2*tm - footHeight)
        doc.setPageSize(textRect.size())
        pagecount=doc.pageCount()
        for index in range(pagecount):
            if index != 0:
                self.printer.newPage()
            self.paintPage(index, pagecount, painter, doc, textRect, footHeight)

    def makeHeader(self, doc, college_data="", exam_data=""):
        size=int(doc.pageSize().width()/3)
        #html = "<div id='aa' align='center'><table border='1' border-style='solid'>"
        #html += "<tr><td><img class='cimg' height='{}' src='college.png'></img></td>".format(size)
        #html += "<td><img height='{}' src='department.jpg'></td>".format(size)
        #html += "<td>{}</td></tr>"
        #html += "<tr><td colspan='3'>{}</td></tr></table></div>"
        #html = html.format(college_data,exam_data)
        html = "<div><span id='college_logo'></span><span id='department_logo'></span><span id='information'></span></div>"
        return html
    
    def makeStyles(self):
        css =  "#div { background-color: black; }"
        css += "#college_logo: {background-image: uri(college.png); }"
        return css

    def preview(self):
        self.preview_widget = QPrintPreviewWidget(self.printer)
        self.preview_widget.setWindowFlags(Qt.Window)
        self.preview_widget.setSinglePageViewMode()
        self.preview_widget.fitInView()
        self.preview_widget.paintRequested.connect(self.doc.print_)
        self.preview_widget.show()
        self.preview_widget.resize(600,800)

from PySide2.QtWebEngineWidgets import QWebEngineView
from PySide2.QtCore import QUrl, QMarginsF
from PySide2.QtGui import QPageLayout

class AppMainWindow(QApplication):
    def __init__(self):
        super().__init__([])
        self.menu = {}
        self.window = self.loadUi()
        self.window.show()
        self.addMenuItem(["one","two"],["some","other",["menuitem"]])
        self.bind_toolbar_actions()
        self.tableQuestions = tableHelper(self,self.window.tableWidgetQuestions)
        self.window.previewButton.clicked.connect(self.clickedPreview)
        self.printer = helperPDF()

    @Slot(bool)
    def clickedPreview(self,checked):
        qDebug("Preview clicked!")
        txt = 'Hola'*1000
        #self.view = QWebEngineView()
        #self.view.load(QUrl("http://qt-project.org/"))
        #self.view.loadFinished.connect(self.finished)
        #self.printer.loadDocument(txt)
        #self.printer.printFile("testexam.pdf")
        #self.printer.preview()
        self.testZone()

    def testZone(self):
        from PySide2.QtGui import QTextCharFormat, QFont
        from PySide2.QtCore import QSizeF
        qDebug("Initiating test")
        
        self.document = QTextDocument()
        self.printer = QPrinter(QPrinter.HighResolution)
        self.printer.setPageMargins(10,10,10,10,QPrinter.Millimeter)
        self.document.setPageSize(QSizeF(self.printer.pageRect().size()))
        
        c = int(self.printer.resolution()) / int(QPrinter(QPrinter.ScreenResolution).resolution())
        qDebug("c={} pagesize(document)={} resolution(printer)={} pagerect(printer)={} paperrect(printer)={}".format(c,self.document.pageSize(),self.printer.resolution(),self.printer.pageRect(),self.printer.paperRect()))
        #self.printer.setResolution(QPrinter.HighResolution)
        #self.document.setPageSize(QPageSize(QPageSize.A4).size(QPageSize.Point))
        
        
        
        
        self.cursor = QTextCursor(self.document)

        self.preview_widget = QPrintPreviewWidget(self.printer)
        self.preview_widget.setWindowFlags(Qt.Window)
        self.preview_widget.setSinglePageViewMode()
        self.preview_widget.fitInView()
        self.preview_widget.paintRequested.connect(self.document.print_)
        self.preview_widget.resize(600,800)
        
        formato=QTextCharFormat()
        formato.setFont(QFont("Times",10 * c))
        self.cursor.insertText("{}".format(list(range(1,10000))),formato)
        self.preview_widget.show()
        #self.document.print_()
        self.diag = PySide2.QtPrintSupport.QPrintPreviewDialog()
        self.diag.paintRequested.connect(self.paintRequest)
        self.diag.exec_()

    @Slot(QPrinter)
    def paintRequest(self,printer):
        document = PySide2.QtGui.QTextDocument()
        document.setPageSize(PySide2.QtCore.QSizeF(printer.pageRect().size()))
        cursor = PySide2.QtGui.QTextCursor(document)
        row = 2
        col = 3
        
        style = PySide2.QtGui.QTextTableFormat()
        style.setBorderStyle(PySide2.QtGui.QTextTableFormat.BorderStyle_Solid)
        style.setBorderBrush(PySide2.QtGui.QBrush(Qt.black))
        style.setMargin(0.0)
        style.setCellSpacing(0.0)
        style.setCellPadding(5.0)
        style.setColumnWidthConstraints([PySide2.QtGui.QTextLength(PySide2.QtGui.QTextLength.PercentageLength,100/col)]*col)
        table = cursor.insertTable(row,col,style)
        table.mergeCells(1,0,1,col)
        newwidth=(document.pageSize()/col).width()
        qDebug(str(newwidth))
        table.cellAt(0,0).firstCursorPosition().insertImage(PySide2.QtGui.QImage("college.png").scaledToWidth(newwidth,Qt.SmoothTransformation))
        uid = PySide2.QtCore.QUuid().createUuid()
        fmt = PySide2.QtGui.QTextImageFormat()
        fmt.setName(uid.toString())
        image = PySide2.QtGui.QImage("department.jpg")
        #document.addResource(PySide2.QtGui.QTextDocument.ImageResource,PySide2.QtCore.QUrl(uid.toString()),image)
        cursor2 = table.cellAt(0,1).firstCursorPosition()
        blockformat = PySide2.QtGui.QTextBlockFormat()
        blockformat.setAlignment(Qt.AlignVCenter)
        blockformat.setLineHeight(document.idealWidth(),PySide2.QtGui.QTextBlockFormat.FixedHeight)
        blockformat.setBackground(PySide2.QtGui.QBrush(Qt.black))
        charformat = PySide2.QtGui.QTextImageFormat()
        charformat.setBackground(Qt.blue)
        charformat.setVerticalAlignment(PySide2.QtGui.QTextCharFormat.VerticalAlignment.AlignMiddle)
        #cursor2 = PySide2.QtGui.QTextTableCellFormat
        table.cellAt(0,1).setFormat(charformat)
        table.cellAt(0,1).firstCursorPosition().insertImage(PySide2.QtGui.QImage("department.jpg").scaledToWidth(newwidth,Qt.SmoothTransformation))
        #blockformat.hei
        #cursor2.insertBlock(blockformat,charformat)
        fmt.setWidth(document.idealWidth())
        fmt.setVerticalAlignment(PySide2.QtGui.QTextCharFormat.VerticalAlignment.AlignMiddle)
        fmt.setBackground(PySide2.QtGui.QBrush(Qt.black))
        #cursor2.insertBlock()
        #cursor2.insertImage(fmt)
        #vcenter = PySide2.QtGui.QTextBlockFormat()
        #vcenter.setAlignment(Qt.AlignVCenter)
        #table.cellAt(0,1).firstCursorPosition().setBlockFormat(vcenter)
        #table.cellAt(0,1).firstCursorPosition().insertImage(PySide2.QtGui.QImage("department.jpg").scaledToWidth(newwidth,Qt.SmoothTransformation))
        
        #for x in range(col):
        #    for y in range(row):
        #        cursor.insertText("({},{})".format(col,row))
        #        cursor.movePosition(PySide2.QtGui.QTextCursor.NextCell)
        document.print_(printer)
        pass
    
    # @Slot(bool)
    # def finished(self):
    #     qDebug('Finished')
    #     self.view.show()
    #     self.page = self.view.page()
    #     self.page.printToPdf("webpage.pdf",QPageLayout(QPageSize(QPageSize.A4),QPageLayout.Portrait,QMarginsF()))

    def loadUi(self):
        ui_file = QFile("mainwindow.ui")
        ui_file.open(QFile.ReadOnly)
        ui_loader = QUiLoader(self)
        window = ui_loader.load(ui_file)
        ui_file.close()
        return window

    def bind_toolbar_actions(self):
        for action in dir(self.window):
            action_obj = getattr(self.window,action)
            if isinstance(action_obj,QAction):
                action_obj.setData(action_obj.text())
                action_obj.triggered.connect(self.test)

    @Slot()
    def test(self):
        data = self.sender().data()
        qDebug("senderData:{}".format(data))
        self.window.statusbar.showMessage("Action from '{}' triggered".format(data),10*1000)
        self.tableQuestions.addItem(data)
        pass

    def calculate_default_menubar_shortcut(self,name):
        used = []
        for item in self.menu:
            for character in item:
                if character in used:
                    continue
                else:
                    used.append(character)
                    break
        newname = ""
        done = False
        for character in name:
            if done or character in used:
                newname += character
            else:
                newname += "&" + character
                done = True

        return newname

    def addMenuItem(self, *args, **kwargs):
        for name in args:
            if isinstance(name,list):
                self.addMenuItem(*name)
                continue
            if not isinstance(name,str) or name in self.menu:
                continue
            name_with_shortcut = self.calculate_default_menubar_shortcut(name)
            self.menu.setdefault(name,[])
            self.menu[name].append(self.window.menubar.addMenu(name_with_shortcut))
            action = Helper().genAction(name=name,fn=self.test,icon=TESTICON,tip=name,parent=self.menu[name][0],data=name)
            self.menu[name][0].addAction(action)

if __name__ == "__main__":
    QApplication.setAttribute(Qt.AA_ShareOpenGLContexts)
    app = AppMainWindow()
    sys.exit(app.exec_())
